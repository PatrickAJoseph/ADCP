
#include <chrono>
#include <pthread.h>
#include <stdio.h>

#include "../ADCP.hpp"

/**************** APPLICATION CONFIGURATIONS ********/

#define	COM_PORT				"COM12"
#define BAUD_RATE				38400
#define NODE_NAME				"MPU_STICK"
#define NODE_ID					0
#define SYMBOL_FILE				"MPU_Stick.csv"

#define TIMEOUT_INTERVAL		250	
#define NUMBER_OF_TRIES			10

#define RUN_TIME				10000
#define UPDATE_INTERVAL			250
#define MAXIMUM_CYCLE_TIME		2500

#define WRITE_PARAMETER_INTERVAL			1500
#define WRITE_PARAMETER_NUMBER_OF_TRIES		15

#define WRITE_PARAMETER_INDEX__IMU_CONFIG_SAMPLING_RATE    (uint8_t)0
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_CALIB_INTERVAL    (uint8_t)1
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_CALIB_POINTS    (uint8_t)2
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_GYRO_BW    (uint8_t)3
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_ACCEL_BW    (uint8_t)4
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_GYRO_FS    (uint8_t)5
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_ACCEL_FS    (uint8_t)6
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_SAMPLING_RATE_WE    (uint8_t)7
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_CALIB_INTERVAL_WE    (uint8_t)8
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_CALIB_POINTS_WE    (uint8_t)9
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_GYRO_BW_WE    (uint8_t)10
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_ACCEL_BW_WE    (uint8_t)11
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_GYRO_FS_WE    (uint8_t)12
#define WRITE_PARAMETER_INDEX__IMU_CONFIG_ACCEL_FS_WE    (uint8_t)13
#define WRITE_PARAMETER_INDEX__MD_ACCEL_X_THRESHOLD_TYPE    (uint8_t)14
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Y_THRESHOLD_TYPE    (uint8_t)15
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Z_THRESHOLD_TYPE    (uint8_t)16
#define WRITE_PARAMETER_INDEX__MD_GYRO_X_THRESHOLD_TYPE    (uint8_t)17
#define WRITE_PARAMETER_INDEX__MD_GYRO_Y_THRESHOLD_TYPE    (uint8_t)18
#define WRITE_PARAMETER_INDEX__MD_GYRO_Z_THRESHOLD_TYPE    (uint8_t)19
#define WRITE_PARAMETER_INDEX__MD_ROLL_THRESHOLD_TYPE    (uint8_t)20
#define WRITE_PARAMETER_INDEX__MD_PITCH_THRESHOLD_TYPE    (uint8_t)21
#define WRITE_PARAMETER_INDEX__MD_YAW_THRESHOLD_TYPE    (uint8_t)22
#define WRITE_PARAMETER_INDEX__MD_ACCEL_X_THRESHOLD_LOW    (uint8_t)23
#define WRITE_PARAMETER_INDEX__MD_ACCEL_X_THRESHOLD_HIGH    (uint8_t)24
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Y_THRESHOLD_LOW    (uint8_t)25
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Y_THRESHOLD_HIGH    (uint8_t)26
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Z_THRESHOLD_LOW    (uint8_t)27
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Z_THRESHOLD_HIGH    (uint8_t)28
#define WRITE_PARAMETER_INDEX__MD_GYRO_X_THRESHOLD_LOW    (uint8_t)29
#define WRITE_PARAMETER_INDEX__MD_GYRO_X_THRESHOLD_HIGH    (uint8_t)30
#define WRITE_PARAMETER_INDEX__MD_GYRO_Y_THRESHOLD_LOW    (uint8_t)31
#define WRITE_PARAMETER_INDEX__MD_GYRO_Y_THRESHOLD_HIGH    (uint8_t)32
#define WRITE_PARAMETER_INDEX__MD_GYRO_Z_THRESHOLD_LOW    (uint8_t)33
#define WRITE_PARAMETER_INDEX__MD_GYRO_Z_THRESHOLD_HIGH    (uint8_t)34
#define WRITE_PARAMETER_INDEX__MD_ROLL_THRESHOLD_LOW    (uint8_t)35
#define WRITE_PARAMETER_INDEX__MD_ROLL_THRESHOLD_HIGH    (uint8_t)36
#define WRITE_PARAMETER_INDEX__MD_PITCH_THRESHOLD_LOW    (uint8_t)37
#define WRITE_PARAMETER_INDEX__MD_PITCH_THRESHOLD_HIGH    (uint8_t)38
#define WRITE_PARAMETER_INDEX__MD_YAW_THRESHOLD_LOW    (uint8_t)39
#define WRITE_PARAMETER_INDEX__MD_YAW_THRESHOLD_HIGH    (uint8_t)40
#define WRITE_PARAMETER_INDEX__MP_ROLL_FILTER_CONSTANT    (uint8_t)41
#define WRITE_PARAMETER_INDEX__MP_PITCH_FILTER_CONSTANT    (uint8_t)42
#define WRITE_PARAMETER_INDEX__MP_YAW_FILTER_CONSTANT    (uint8_t)43
#define WRITE_PARAMETER_INDEX__MD_ACCEL_X_THRESHOLD_LOW_WE    (uint8_t)44
#define WRITE_PARAMETER_INDEX__MD_ACCEL_X_THRESHOLD_HIGH_WE    (uint8_t)45
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Y_THRESHOLD_LOW_WE    (uint8_t)46
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Y_THRESHOLD_HIGH_WE    (uint8_t)47
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Z_THRESHOLD_LOW_WE    (uint8_t)48
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Z_THRESHOLD_HIGH_WE    (uint8_t)49
#define WRITE_PARAMETER_INDEX__MD_GYRO_X_THRESHOLD_LOW_WE    (uint8_t)50
#define WRITE_PARAMETER_INDEX__MD_GYRO_X_THRESHOLD_HIGH_WE    (uint8_t)51
#define WRITE_PARAMETER_INDEX__MD_GYRO_Y_THRESHOLD_LOW_WE    (uint8_t)52
#define WRITE_PARAMETER_INDEX__MD_GYRO_Y_THRESHOLD_HIGH_WE    (uint8_t)53
#define WRITE_PARAMETER_INDEX__MD_GYRO_Z_THRESHOLD_LOW_WE    (uint8_t)54
#define WRITE_PARAMETER_INDEX__MD_GYRO_Z_THRESHOLD_HIGH_WE    (uint8_t)55
#define WRITE_PARAMETER_INDEX__MD_ROLL_THRESHOLD_LOW_WE    (uint8_t)56
#define WRITE_PARAMETER_INDEX__MD_ROLL_THRESHOLD_HIGH_WE    (uint8_t)57
#define WRITE_PARAMETER_INDEX__MD_PITCH_THRESHOLD_LOW_WE    (uint8_t)58
#define WRITE_PARAMETER_INDEX__MD_PITCH_THRESHOLD_HIGH_WE    (uint8_t)59
#define WRITE_PARAMETER_INDEX__MD_YAW_THRESHOLD_LOW_WE    (uint8_t)60
#define WRITE_PARAMETER_INDEX__MD_YAW_THRESHOLD_HIGH_WE    (uint8_t)61
#define WRITE_PARAMETER_INDEX__MP_ROLL_FILTER_CONSTANT_WE    (uint8_t)62
#define WRITE_PARAMETER_INDEX__MP_PITCH_FILTER_CONSTANT_WE    (uint8_t)63
#define WRITE_PARAMETER_INDEX__MP_YAW_FILTER_CONSTANT_WE    (uint8_t)64
#define WRITE_PARAMETER_INDEX__MD_ACCEL_X_THRESHOLD_TYPE_WE    (uint8_t)65
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Y_THRESHOLD_TYPE_WE    (uint8_t)66
#define WRITE_PARAMETER_INDEX__MD_ACCEL_Z_THRESHOLD_TYPE_WE    (uint8_t)67
#define WRITE_PARAMETER_INDEX__MD_GYRO_X_THRESHOLD_TYPE_WE    (uint8_t)68
#define WRITE_PARAMETER_INDEX__MD_GYRO_Y_THRESHOLD_TYPE_WE    (uint8_t)69
#define WRITE_PARAMETER_INDEX__MD_GYRO_Z_THRESHOLD_TYPE_WE    (uint8_t)70
#define WRITE_PARAMETER_INDEX__MD_ROLL_THRESHOLD_TYPE_WE    (uint8_t)71
#define WRITE_PARAMETER_INDEX__MD_PITCH_THRESHOLD_TYPE_WE    (uint8_t)72
#define WRITE_PARAMETER_INDEX__MD_YAW_THRESHOLD_TYPE_WE    (uint8_t)73
#define WRITE_PARAMETER_INDEX__LED1_MODE    (uint8_t)74
#define WRITE_PARAMETER_INDEX__LED2_MODE    (uint8_t)75
#define WRITE_PARAMETER_INDEX__LED3_MODE    (uint8_t)76
#define WRITE_PARAMETER_INDEX__LED1_MODE_WE    (uint8_t)77
#define WRITE_PARAMETER_INDEX__LED2_MODE_WE    (uint8_t)78
#define WRITE_PARAMETER_INDEX__LED3_MODE_WE    (uint8_t)79
#define WRITE_PARAMETER_INDEX__LED1_UC_STATE    (uint8_t)80
#define WRITE_PARAMETER_INDEX__LED2_UC_STATE    (uint8_t)81
#define WRITE_PARAMETER_INDEX__LED3_UC_STATE    (uint8_t)82
#define WRITE_PARAMETER_INDEX__LED1_UC_DUTY    (uint8_t)83
#define WRITE_PARAMETER_INDEX__LED2_UC_DUTY    (uint8_t)84
#define WRITE_PARAMETER_INDEX__LED3_UC_DUTY    (uint8_t)85
#define WRITE_PARAMETER_INDEX__LED_UC_STATE_WE    (uint8_t)86
#define WRITE_PARAMETER_INDEX__LED_UC_DUTY_WE    (uint8_t)87
#define WRITE_PARAMETER_INDEX__CONFIG_SAVE    (uint8_t)88
#define WRITE_PARAMETER_INDEX__IMU_CALIBRATE    (uint8_t)89
#define WRITE_PARAMETER_INDEX__MP_RESET    (uint8_t)90
#define WRITE_PARAMETER_INDEX__CONFIG_SAVE_ACK    (uint8_t)91
#define WRITE_PARAMETER_INDEX__IMU_CALIBRATE_ACK    (uint8_t)92
#define WRITE_PARAMETER_INDEX__MP_RESET_ACK    (uint8_t)93
#define WRITE_PARAMETER_INDEX__FRAME_ID    (uint8_t)94
#define WRITE_PARAMETER_INDEX__WRITE_PARAMETER_INDEX    (uint8_t)95
#define WRITE_PARAMETER_INDEX__WRITE_PARAMETER_ACK    (uint8_t)96
#define WRITE_PARAMETER_INDEX__LED1_MODE_WRITE_ENABLE (uint8_t)97
#define WRITE_PARAMETER_INDEX__LED2_MODE_WRITE_ENABLE (uint8_t)98
#define WRITE_PARAMETER_INDEX__LED3_MODE_WRITE_ENABLE (uint8_t)99
#define WRITE_PARAMETER_INDEX__LED1_STATE_WRITE_ENABLE (uint8_t)100
#define WRITE_PARAMETER_INDEX__LED2_STATE_WRITE_ENABLE (uint8_t)101
#define WRITE_PARAMETER_INDEX__LED3_STATE_WRITE_ENABLE (uint8_t)102
#define WRITE_PARAMETER_INDEX__LED1_DUTY_WRITE_ENABLE (uint8_t)103
#define WRITE_PARAMETER_INDEX__LED2_DUTY_WRITE_ENABLE (uint8_t)104
#define WRITE_PARAMETER_INDEX__LED3_DUTY_WRITE_ENABLE (uint8_t)105

/**************	MAIN CODE *******************************/

ADCP adcp;


void write_parameter(const string& parameter_name,double value,uint32_t parameter_index)
{
	int status = 0;
	int ack = 0;
	int receive_index = 0;
	int counter = 0;
	
	for(int i = 0 ; i < WRITE_PARAMETER_NUMBER_OF_TRIES ; i++)
	{
		adcp.write_parameter("MPU_STICK::WRITE_PARAMETER::WRITE_PARAMETER_INDEX",65535);
		adcp.write_parameter("MPU_STICK::WRITE_PARAMETER::WRITE_PARAMETER_ACK",0);
		adcp.send_parameter(parameter_name,value);
		adcp.receive_frame("MPU_STICK::WRITE_PARAMETER",TIMEOUT_INTERVAL);

		adcp.receive_frame("MPU_STICK::WRITE_PARAMETER",TIMEOUT_INTERVAL);
		receive_index = adcp.read_parameter("MPU_STICK::WRITE_PARAMETER::WRITE_PARAMETER_INDEX");
		ack = adcp.read_parameter("MPU_STICK::WRITE_PARAMETER::WRITE_PARAMETER_ACK");
		
		if( (receive_index == parameter_index )
			&& ( ack == 1 ) )
		{
			status = 1;
			break;
		}
		
		
		//if( status == 0 )
			//Sleep(WRITE_PARAMETER_INTERVAL);
	}
	
	if( status == 0 )
	{
		cout << parameter_name << " not written to device successfully !" << endl;
		cout << "Receive index : " << receive_index << " ACK status : " << ack << endl;
	}
}


int main()
{	
	adcp.serial_port_init(COM_PORT,BAUD_RATE);
	adcp.read_file(SYMBOL_FILE);
	adcp.serial_port_flush(NULL);
	adcp.open_node_connection(NODE_ID, TIMEOUT_INTERVAL, NUMBER_OF_TRIES);
	
	adcp.reset_node( NODE_ID, TIMEOUT_INTERVAL, NUMBER_OF_TRIES );
	//adcp.open_node_connection( NODE_ID, TIMEOUT_INTERVAL, NUMBER_OF_TRIES );

	vector<string> frames;
	
	frames.push_back("MPU_STICK::IMU_CONFIG_WRITE_ENABLE");
	frames.push_back("MPU_STICK::IMU_CONFIG_REG_A");
	frames.push_back("MPU_STICK::IMU_CONFIG_REG_B");
	frames.push_back("MPU_STICK::LED_MODE_CONFIG");

	adcp.ADCP::remote_frame_request(NODE_ID,frames,TIMEOUT_INTERVAL,NUMBER_OF_TRIES);

	frames.clear();

	frames.push_back("MPU_STICK::LED_UC_WRITE");
	frames.push_back("MPU_STICK::LED_CSD_WRITE_ENABLE");
		
	adcp.ADCP::remote_frame_request(NODE_ID,frames,TIMEOUT_INTERVAL,NUMBER_OF_TRIES);

	frames.clear();

	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_MODE_WRITE_ENABLE",0);	
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_MODE_WRITE_ENABLE",0);	
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_MODE_WRITE_ENABLE",0);	
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_STATE_WRITE_ENABLE",0);	
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_STATE_WRITE_ENABLE",0);	
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_STATE_WRITE_ENABLE",0);	
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_DUTY_WRITE_ENABLE",0);	
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_DUTY_WRITE_ENABLE",0);	
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_DUTY_WRITE_ENABLE",0);	

	/*

	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_MODE_WRITE_ENABLE",1);		
	cout << "Configuring LED1 as digital output..." << endl;
	write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_MODE_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED1_MODE_WRITE_ENABLE);
	write_parameter("MPU_STICK::LED_MODE_CONFIG::LED1_MODE",
					adcp.get_enum_index("MPU_STICK::LED_MODE_CONFIG::LED1_MODE","USER_CONTROLLED_DIG_OUTPUT"),
					WRITE_PARAMETER_INDEX__LED1_MODE);
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_MODE_WRITE_ENABLE",0);	

	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_MODE_WRITE_ENABLE",1);		
	cout << "Configuring LED2 as digital output..." << endl;
	write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_MODE_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED2_MODE_WRITE_ENABLE);
	write_parameter("MPU_STICK::LED_MODE_CONFIG::LED2_MODE",
					adcp.get_enum_index("MPU_STICK::LED_MODE_CONFIG::LED2_MODE","USER_CONTROLLED_DIG_OUTPUT"),
					WRITE_PARAMETER_INDEX__LED2_MODE);
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_MODE_WRITE_ENABLE",0);	

	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_MODE_WRITE_ENABLE",1);		
	cout << "Configuring LED3 as digital output..." << endl;
	write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_MODE_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED3_MODE_WRITE_ENABLE);
	write_parameter("MPU_STICK::LED_MODE_CONFIG::LED3_MODE",
					adcp.get_enum_index("MPU_STICK::LED_MODE_CONFIG::LED3_MODE","USER_CONTROLLED_DIG_OUTPUT"),
					WRITE_PARAMETER_INDEX__LED3_MODE);
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_MODE_WRITE_ENABLE",0);	


	for(int i = 0 ; i < 8 ; i ++ )
	{
		cout << "Setting LED1 state:" << (( i >> 0 ) & 0x01) << endl;
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_STATE_WRITE_ENABLE",1);
		write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_STATE_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED1_STATE_WRITE_ENABLE);
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_STATE_WRITE_ENABLE",0);
		write_parameter("MPU_STICK::LED_UC_WRITE::LED1_UC_STATE",(i >> 0) & 0x01,WRITE_PARAMETER_INDEX__LED1_UC_STATE);

		cout << "Setting LED2 state:" << (( i >> 1 ) & 0x01) << endl;
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_STATE_WRITE_ENABLE",1);
		write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_STATE_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED2_STATE_WRITE_ENABLE);
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_STATE_WRITE_ENABLE",0);
		write_parameter("MPU_STICK::LED_UC_WRITE::LED2_UC_STATE",(i >> 1) & 0x01,WRITE_PARAMETER_INDEX__LED2_UC_STATE);

		cout << "Setting LED3 state:" << (( i >> 2 ) & 0x01) << endl;
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_STATE_WRITE_ENABLE",1);
		write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_STATE_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED3_STATE_WRITE_ENABLE);
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_STATE_WRITE_ENABLE",0);
		write_parameter("MPU_STICK::LED_UC_WRITE::LED3_UC_STATE",(i >> 2) & 0x01,WRITE_PARAMETER_INDEX__LED3_UC_STATE);
	}
	
	*/


	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_MODE_WRITE_ENABLE",1);		
	cout << "Configuring LED1 as PWM output..." << endl;
	write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_MODE_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED1_MODE_WRITE_ENABLE);
	write_parameter("MPU_STICK::LED_MODE_CONFIG::LED1_MODE",
					adcp.get_enum_index("MPU_STICK::LED_MODE_CONFIG::LED1_MODE","USER_CONTROLLED_PWM_OUTPUT"),
					WRITE_PARAMETER_INDEX__LED1_MODE);
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_MODE_WRITE_ENABLE",0);	

	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_MODE_WRITE_ENABLE",1);		
	cout << "Configuring LED2 as PWM output..." << endl;
	write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_MODE_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED2_MODE_WRITE_ENABLE);
	write_parameter("MPU_STICK::LED_MODE_CONFIG::LED2_MODE",
					adcp.get_enum_index("MPU_STICK::LED_MODE_CONFIG::LED2_MODE","USER_CONTROLLED_PWM_OUTPUT"),
					WRITE_PARAMETER_INDEX__LED2_MODE);
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_MODE_WRITE_ENABLE",0);	

	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_MODE_WRITE_ENABLE",1);		
	cout << "Configuring LED3 as PWM output..." << endl;
	write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_MODE_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED3_MODE_WRITE_ENABLE);
	write_parameter("MPU_STICK::LED_MODE_CONFIG::LED3_MODE",
					adcp.get_enum_index("MPU_STICK::LED_MODE_CONFIG::LED3_MODE","USER_CONTROLLED_PWM_OUTPUT"),
					WRITE_PARAMETER_INDEX__LED3_MODE);
	adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_MODE_WRITE_ENABLE",0);	

	
	for(int led_1_pwm = 0 ; led_1_pwm < 100 ; led_1_pwm++ )
	{
		cout << "Setting LED1 PWM: " << led_1_pwm << endl;
		write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_DUTY_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED1_DUTY_WRITE_ENABLE);
		write_parameter("MPU_STICK::LED_UC_WRITE::LED1_UC_DUTY",led_1_pwm,WRITE_PARAMETER_INDEX__LED1_UC_DUTY);
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_DUTY_WRITE_ENABLE",0);		
	}

	for(int led_1_pwm = 0 ; led_1_pwm < 100 ; led_1_pwm++ )
	{
		cout << "Setting LED1 PWM: " << 100-led_1_pwm << endl;
		write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_DUTY_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED1_DUTY_WRITE_ENABLE);
		write_parameter("MPU_STICK::LED_UC_WRITE::LED1_UC_DUTY",100-led_1_pwm,WRITE_PARAMETER_INDEX__LED1_UC_DUTY);
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED1_DUTY_WRITE_ENABLE",0);		
	}

	for(int led_2_pwm = 0 ; led_2_pwm < 100 ; led_2_pwm++ )
	{
		cout << "Setting LED2 PWM: " << led_2_pwm << endl;
		write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_DUTY_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED2_DUTY_WRITE_ENABLE);
		write_parameter("MPU_STICK::LED_UC_WRITE::LED2_UC_DUTY",led_2_pwm,WRITE_PARAMETER_INDEX__LED2_UC_DUTY);
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_DUTY_WRITE_ENABLE",0);		
	}

	for(int led_2_pwm = 0 ; led_2_pwm < 100 ; led_2_pwm++ )
	{
		cout << "Setting LED2 PWM: " << 100-led_2_pwm << endl;
		write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_DUTY_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED2_DUTY_WRITE_ENABLE);
		write_parameter("MPU_STICK::LED_UC_WRITE::LED2_UC_DUTY",100-led_2_pwm,WRITE_PARAMETER_INDEX__LED2_UC_DUTY);
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED2_DUTY_WRITE_ENABLE",0);		
	}

	for(int led_3_pwm = 0 ; led_3_pwm < 100 ; led_3_pwm++ )
	{
		cout << "Setting LED3 PWM: " << led_3_pwm << endl;
		write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_DUTY_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED3_DUTY_WRITE_ENABLE);
		write_parameter("MPU_STICK::LED_UC_WRITE::LED3_UC_DUTY",led_3_pwm,WRITE_PARAMETER_INDEX__LED3_UC_DUTY);
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_DUTY_WRITE_ENABLE",0);		
	}

	for(int led_3_pwm = 0 ; led_3_pwm < 100 ; led_3_pwm++ )
	{
		cout << "Setting LED3 PWM: " << 100-led_3_pwm << endl;
		write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_DUTY_WRITE_ENABLE",1,WRITE_PARAMETER_INDEX__LED3_DUTY_WRITE_ENABLE);
		write_parameter("MPU_STICK::LED_UC_WRITE::LED3_UC_DUTY",100-led_3_pwm,WRITE_PARAMETER_INDEX__LED3_UC_DUTY);
		adcp.write_parameter("MPU_STICK::LED_CSD_WRITE_ENABLE::LED3_DUTY_WRITE_ENABLE",0);		
	}


	
	adcp.close_node_connection( NODE_ID, TIMEOUT_INTERVAL, NUMBER_OF_TRIES );
	adcp.serial_port_close();
		
	return(0);	
}
